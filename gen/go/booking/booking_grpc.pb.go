// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: booking/booking.proto

package bookingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BookingService_CreateBooking_FullMethodName         = "/BookingService/CreateBooking"
	BookingService_GetBookingAll_FullMethodName         = "/BookingService/GetBookingAll"
	BookingService_UpdateBooking_FullMethodName         = "/BookingService/UpdateBooking"
	BookingService_DeleteBooking_FullMethodName         = "/BookingService/DeleteBooking"
	BookingService_AddUserToWaitingGroup_FullMethodName = "/BookingService/AddUserToWaitingGroup"
	BookingService_GetUserTOWaitingGroup_FullMethodName = "/BookingService/GetUserTOWaitingGroup"
	BookingService_GetAllWaitingGroup_FullMethodName    = "/BookingService/GetAllWaitingGroup"
)

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	CreateBooking(ctx context.Context, in *CreateBookingReq, opts ...grpc.CallOption) (*CreateBookingRes, error)
	GetBookingAll(ctx context.Context, in *GetBookingAllReq, opts ...grpc.CallOption) (*GetBookingAllRes, error)
	UpdateBooking(ctx context.Context, in *UpdateBookingReq, opts ...grpc.CallOption) (*UpdateBookingRes, error)
	DeleteBooking(ctx context.Context, in *DeleteBookingReq, opts ...grpc.CallOption) (*DeleteBookingRes, error)
	AddUserToWaitingGroup(ctx context.Context, in *AddUserToWaitingGroupReq, opts ...grpc.CallOption) (*AddUserToWaitingGroupRes, error)
	GetUserTOWaitingGroup(ctx context.Context, in *GetUserTOWaitingGroupReq, opts ...grpc.CallOption) (*GetUserTOWaitingGroupRes, error)
	GetAllWaitingGroup(ctx context.Context, in *GetAllWaitingGroupReq, opts ...grpc.CallOption) (*GetAllWaitingGroupRes, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) CreateBooking(ctx context.Context, in *CreateBookingReq, opts ...grpc.CallOption) (*CreateBookingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookingRes)
	err := c.cc.Invoke(ctx, BookingService_CreateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingAll(ctx context.Context, in *GetBookingAllReq, opts ...grpc.CallOption) (*GetBookingAllRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingAllRes)
	err := c.cc.Invoke(ctx, BookingService_GetBookingAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) UpdateBooking(ctx context.Context, in *UpdateBookingReq, opts ...grpc.CallOption) (*UpdateBookingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookingRes)
	err := c.cc.Invoke(ctx, BookingService_UpdateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) DeleteBooking(ctx context.Context, in *DeleteBookingReq, opts ...grpc.CallOption) (*DeleteBookingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBookingRes)
	err := c.cc.Invoke(ctx, BookingService_DeleteBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) AddUserToWaitingGroup(ctx context.Context, in *AddUserToWaitingGroupReq, opts ...grpc.CallOption) (*AddUserToWaitingGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserToWaitingGroupRes)
	err := c.cc.Invoke(ctx, BookingService_AddUserToWaitingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetUserTOWaitingGroup(ctx context.Context, in *GetUserTOWaitingGroupReq, opts ...grpc.CallOption) (*GetUserTOWaitingGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTOWaitingGroupRes)
	err := c.cc.Invoke(ctx, BookingService_GetUserTOWaitingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetAllWaitingGroup(ctx context.Context, in *GetAllWaitingGroupReq, opts ...grpc.CallOption) (*GetAllWaitingGroupRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWaitingGroupRes)
	err := c.cc.Invoke(ctx, BookingService_GetAllWaitingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	CreateBooking(context.Context, *CreateBookingReq) (*CreateBookingRes, error)
	GetBookingAll(context.Context, *GetBookingAllReq) (*GetBookingAllRes, error)
	UpdateBooking(context.Context, *UpdateBookingReq) (*UpdateBookingRes, error)
	DeleteBooking(context.Context, *DeleteBookingReq) (*DeleteBookingRes, error)
	AddUserToWaitingGroup(context.Context, *AddUserToWaitingGroupReq) (*AddUserToWaitingGroupRes, error)
	GetUserTOWaitingGroup(context.Context, *GetUserTOWaitingGroupReq) (*GetUserTOWaitingGroupRes, error)
	GetAllWaitingGroup(context.Context, *GetAllWaitingGroupReq) (*GetAllWaitingGroupRes, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) CreateBooking(context.Context, *CreateBookingReq) (*CreateBookingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingAll(context.Context, *GetBookingAllReq) (*GetBookingAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingAll not implemented")
}
func (UnimplementedBookingServiceServer) UpdateBooking(context.Context, *UpdateBookingReq) (*UpdateBookingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedBookingServiceServer) DeleteBooking(context.Context, *DeleteBookingReq) (*DeleteBookingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBooking not implemented")
}
func (UnimplementedBookingServiceServer) AddUserToWaitingGroup(context.Context, *AddUserToWaitingGroupReq) (*AddUserToWaitingGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToWaitingGroup not implemented")
}
func (UnimplementedBookingServiceServer) GetUserTOWaitingGroup(context.Context, *GetUserTOWaitingGroupReq) (*GetUserTOWaitingGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTOWaitingGroup not implemented")
}
func (UnimplementedBookingServiceServer) GetAllWaitingGroup(context.Context, *GetAllWaitingGroupReq) (*GetAllWaitingGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWaitingGroup not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CreateBooking(ctx, req.(*CreateBookingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBookingAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingAll(ctx, req.(*GetBookingAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_UpdateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).UpdateBooking(ctx, req.(*UpdateBookingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_DeleteBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).DeleteBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_DeleteBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).DeleteBooking(ctx, req.(*DeleteBookingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_AddUserToWaitingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToWaitingGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AddUserToWaitingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AddUserToWaitingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AddUserToWaitingGroup(ctx, req.(*AddUserToWaitingGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetUserTOWaitingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTOWaitingGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetUserTOWaitingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetUserTOWaitingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetUserTOWaitingGroup(ctx, req.(*GetUserTOWaitingGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetAllWaitingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWaitingGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetAllWaitingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetAllWaitingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetAllWaitingGroup(ctx, req.(*GetAllWaitingGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _BookingService_CreateBooking_Handler,
		},
		{
			MethodName: "GetBookingAll",
			Handler:    _BookingService_GetBookingAll_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _BookingService_UpdateBooking_Handler,
		},
		{
			MethodName: "DeleteBooking",
			Handler:    _BookingService_DeleteBooking_Handler,
		},
		{
			MethodName: "AddUserToWaitingGroup",
			Handler:    _BookingService_AddUserToWaitingGroup_Handler,
		},
		{
			MethodName: "GetUserTOWaitingGroup",
			Handler:    _BookingService_GetUserTOWaitingGroup_Handler,
		},
		{
			MethodName: "GetAllWaitingGroup",
			Handler:    _BookingService_GetAllWaitingGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking/booking.proto",
}
