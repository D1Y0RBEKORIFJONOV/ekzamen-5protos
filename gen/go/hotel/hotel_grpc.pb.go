// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: hotel/hotel.proto

package hotelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HotelService_CreateHotelService_FullMethodName = "/HotelService/CreateHotelService"
	HotelService_GetHotels_FullMethodName          = "/HotelService/GetHotels"
	HotelService_GetHotelsRooms_FullMethodName     = "/HotelService/GetHotelsRooms"
	HotelService_AddRoomToHotels_FullMethodName    = "/HotelService/AddRoomToHotels"
	HotelService_UpdateHotel_FullMethodName        = "/HotelService/UpdateHotel"
	HotelService_UpdateHotelsRoom_FullMethodName   = "/HotelService/UpdateHotelsRoom"
	HotelService_BookingRoom_FullMethodName        = "/HotelService/BookingRoom"
	HotelService_DeleteHotel_FullMethodName        = "/HotelService/DeleteHotel"
	HotelService_DeleteHotelRooms_FullMethodName   = "/HotelService/DeleteHotelRooms"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	CreateHotelService(ctx context.Context, in *CreateHotelServiceReq, opts ...grpc.CallOption) (*CreateHotelServiceRes, error)
	GetHotels(ctx context.Context, in *GetAllHotelsReq, opts ...grpc.CallOption) (*GetAllHotelRes, error)
	GetHotelsRooms(ctx context.Context, in *GetHotelsRoomsReq, opts ...grpc.CallOption) (*GetHotelsRoomsRes, error)
	AddRoomToHotels(ctx context.Context, in *AddRoomToHotelsReq, opts ...grpc.CallOption) (*AddRoomToHotelsRes, error)
	UpdateHotel(ctx context.Context, in *UpdateHotelReq, opts ...grpc.CallOption) (*UpdateHotelRes, error)
	UpdateHotelsRoom(ctx context.Context, in *UpdateHotelsRoomReq, opts ...grpc.CallOption) (*UpdateHotelsRoomRes, error)
	BookingRoom(ctx context.Context, in *BookingRoomReq, opts ...grpc.CallOption) (*BookingRoomRes, error)
	DeleteHotel(ctx context.Context, in *DeleteHotelReq, opts ...grpc.CallOption) (*DeleteHotelRes, error)
	DeleteHotelRooms(ctx context.Context, in *DeleteHotelRoomsReq, opts ...grpc.CallOption) (*DeleteHotelRoomsRes, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) CreateHotelService(ctx context.Context, in *CreateHotelServiceReq, opts ...grpc.CallOption) (*CreateHotelServiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHotelServiceRes)
	err := c.cc.Invoke(ctx, HotelService_CreateHotelService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotels(ctx context.Context, in *GetAllHotelsReq, opts ...grpc.CallOption) (*GetAllHotelRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllHotelRes)
	err := c.cc.Invoke(ctx, HotelService_GetHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotelsRooms(ctx context.Context, in *GetHotelsRoomsReq, opts ...grpc.CallOption) (*GetHotelsRoomsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelsRoomsRes)
	err := c.cc.Invoke(ctx, HotelService_GetHotelsRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) AddRoomToHotels(ctx context.Context, in *AddRoomToHotelsReq, opts ...grpc.CallOption) (*AddRoomToHotelsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRoomToHotelsRes)
	err := c.cc.Invoke(ctx, HotelService_AddRoomToHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UpdateHotel(ctx context.Context, in *UpdateHotelReq, opts ...grpc.CallOption) (*UpdateHotelRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHotelRes)
	err := c.cc.Invoke(ctx, HotelService_UpdateHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UpdateHotelsRoom(ctx context.Context, in *UpdateHotelsRoomReq, opts ...grpc.CallOption) (*UpdateHotelsRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHotelsRoomRes)
	err := c.cc.Invoke(ctx, HotelService_UpdateHotelsRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) BookingRoom(ctx context.Context, in *BookingRoomReq, opts ...grpc.CallOption) (*BookingRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingRoomRes)
	err := c.cc.Invoke(ctx, HotelService_BookingRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotel(ctx context.Context, in *DeleteHotelReq, opts ...grpc.CallOption) (*DeleteHotelRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHotelRes)
	err := c.cc.Invoke(ctx, HotelService_DeleteHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotelRooms(ctx context.Context, in *DeleteHotelRoomsReq, opts ...grpc.CallOption) (*DeleteHotelRoomsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHotelRoomsRes)
	err := c.cc.Invoke(ctx, HotelService_DeleteHotelRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	CreateHotelService(context.Context, *CreateHotelServiceReq) (*CreateHotelServiceRes, error)
	GetHotels(context.Context, *GetAllHotelsReq) (*GetAllHotelRes, error)
	GetHotelsRooms(context.Context, *GetHotelsRoomsReq) (*GetHotelsRoomsRes, error)
	AddRoomToHotels(context.Context, *AddRoomToHotelsReq) (*AddRoomToHotelsRes, error)
	UpdateHotel(context.Context, *UpdateHotelReq) (*UpdateHotelRes, error)
	UpdateHotelsRoom(context.Context, *UpdateHotelsRoomReq) (*UpdateHotelsRoomRes, error)
	BookingRoom(context.Context, *BookingRoomReq) (*BookingRoomRes, error)
	DeleteHotel(context.Context, *DeleteHotelReq) (*DeleteHotelRes, error)
	DeleteHotelRooms(context.Context, *DeleteHotelRoomsReq) (*DeleteHotelRoomsRes, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) CreateHotelService(context.Context, *CreateHotelServiceReq) (*CreateHotelServiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotelService not implemented")
}
func (UnimplementedHotelServiceServer) GetHotels(context.Context, *GetAllHotelsReq) (*GetAllHotelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotels not implemented")
}
func (UnimplementedHotelServiceServer) GetHotelsRooms(context.Context, *GetHotelsRoomsReq) (*GetHotelsRoomsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotelsRooms not implemented")
}
func (UnimplementedHotelServiceServer) AddRoomToHotels(context.Context, *AddRoomToHotelsReq) (*AddRoomToHotelsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomToHotels not implemented")
}
func (UnimplementedHotelServiceServer) UpdateHotel(context.Context, *UpdateHotelReq) (*UpdateHotelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotel not implemented")
}
func (UnimplementedHotelServiceServer) UpdateHotelsRoom(context.Context, *UpdateHotelsRoomReq) (*UpdateHotelsRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotelsRoom not implemented")
}
func (UnimplementedHotelServiceServer) BookingRoom(context.Context, *BookingRoomReq) (*BookingRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingRoom not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotel(context.Context, *DeleteHotelReq) (*DeleteHotelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotel not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotelRooms(context.Context, *DeleteHotelRoomsReq) (*DeleteHotelRoomsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotelRooms not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_CreateHotelService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotelServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateHotelService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_CreateHotelService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateHotelService(ctx, req.(*CreateHotelServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHotelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotels(ctx, req.(*GetAllHotelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotelsRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelsRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotelsRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotelsRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotelsRooms(ctx, req.(*GetHotelsRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_AddRoomToHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoomToHotelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).AddRoomToHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_AddRoomToHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).AddRoomToHotels(ctx, req.(*AddRoomToHotelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UpdateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UpdateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_UpdateHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UpdateHotel(ctx, req.(*UpdateHotelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UpdateHotelsRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotelsRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UpdateHotelsRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_UpdateHotelsRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UpdateHotelsRoom(ctx, req.(*UpdateHotelsRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_BookingRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).BookingRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_BookingRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).BookingRoom(ctx, req.(*BookingRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_DeleteHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotel(ctx, req.(*DeleteHotelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotelRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotelRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotelRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_DeleteHotelRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotelRooms(ctx, req.(*DeleteHotelRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHotelService",
			Handler:    _HotelService_CreateHotelService_Handler,
		},
		{
			MethodName: "GetHotels",
			Handler:    _HotelService_GetHotels_Handler,
		},
		{
			MethodName: "GetHotelsRooms",
			Handler:    _HotelService_GetHotelsRooms_Handler,
		},
		{
			MethodName: "AddRoomToHotels",
			Handler:    _HotelService_AddRoomToHotels_Handler,
		},
		{
			MethodName: "UpdateHotel",
			Handler:    _HotelService_UpdateHotel_Handler,
		},
		{
			MethodName: "UpdateHotelsRoom",
			Handler:    _HotelService_UpdateHotelsRoom_Handler,
		},
		{
			MethodName: "BookingRoom",
			Handler:    _HotelService_BookingRoom_Handler,
		},
		{
			MethodName: "DeleteHotel",
			Handler:    _HotelService_DeleteHotel_Handler,
		},
		{
			MethodName: "DeleteHotelRooms",
			Handler:    _HotelService_DeleteHotelRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel/hotel.proto",
}
